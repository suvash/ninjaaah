/*
-----------------------------------------------------------------------------
Filename:    g5main.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (August 2010)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "g5main.h"

//-------------------------------------------------------------------------------------
g5main::g5main(void)
{
	mCEGUI = new OgreCEGUI();
}
//-------------------------------------------------------------------------------------
g5main::~g5main(void)
{
}

//-------------------------------------------------------------------------------------
void g5main::createScene(void)
{
	mCEGUI->createScene();
}

void g5main::createFrameListener(void)
{
	Ogre::LogManager::getSingletonPtr()->logMessage("*** Initializing OIS ***");
	OIS::ParamList pl;
	size_t windowHnd = 0;
	std::ostringstream windowHndStr;

	mWindow->getCustomAttribute("WINDOW", &windowHnd);
	windowHndStr << windowHnd;
	pl.insert(std::make_pair(std::string("WINDOW"), windowHndStr.str()));

	mInputManager = OIS::InputManager::createInputSystem( pl );

	mKeyboard = static_cast<OIS::Keyboard*>(mInputManager->createInputObject( OIS::OISKeyboard, true ));
	mMouse = static_cast<OIS::Mouse*>(mInputManager->createInputObject( OIS::OISMouse, true ));

	mMouse->setEventCallback(this);
	mKeyboard->setEventCallback(this);

	//Set initial mouse clipping size
	windowResized(mWindow);

	//Register as a Window listener
	Ogre::WindowEventUtilities::addWindowEventListener(mWindow, this);

	mRoot->addFrameListener(this);
	//mCEGUI->createFrameListener();
}

bool g5main::frameRenderingQueued(const Ogre::FrameEvent& evt)
{
	if(mWindow->isClosed()) return false;

	if(mCEGUI->mShutDown) return false;

	//Need to capture/update each device
	mKeyboard->capture();
	mMouse->capture();

	return true;
	//mCEGUI->frameRenderingQueued(evt);
	//return true;
}

bool g5main::keyPressed( const OIS::KeyEvent &arg )
{
	mCEGUI->keyPressed(arg);
	if (arg.key == OIS::KC_ESCAPE)
	{
		mCEGUI->mShutDown = true;
	}
	return true;
}
//-------------------------------------------------------------------------------------
bool g5main::keyReleased( const OIS::KeyEvent &arg )
{
	mCEGUI->keyReleased(arg);
	return true;
}
//-------------------------------------------------------------------------------------
bool g5main::mouseMoved( const OIS::MouseEvent &arg )
{
	mCEGUI->mouseMoved(arg);
	return true;
}
//-------------------------------------------------------------------------------------
bool g5main::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
	mCEGUI->mousePressed(arg,id);
	return true;
}
//-------------------------------------------------------------------------------------
bool g5main::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
	mCEGUI->mouseReleased(arg,id);
	return true;
}
//-------------------------------------------------------------------------------------
bool g5main::quit(const CEGUI::EventArgs &e)
{
	mShutDown = true;
	return true;
}

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        g5main app;
        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
